<script type="text/javascript" defer="defer">
document.addEventListener('DOMContentLoaded', function() {

	Cookies.defaults = { path: '/', secure: true, sameSite: 'lax' };

	const prefix = (key) => {$controlName}+"-"+key;
	const prefixObj = (obj) => Object.fromEntries(
		Object.entries(obj).map(([k, v]) => [prefix(k), v])
	);

	let config = {$config}
	let element = document.getElementById(prefix('timeGrid'));
	let control = document.getElementById({$controlName});

	let calendarView = null;
	let calendar = new FullCalendar.Calendar(element, Object.assign({}, config, {
		endParam: prefix('end'),
		startParam: prefix('start'),
		timeZoneParam: prefix('timeZone'),
		eventSources: [{link fetch!}],

		// Events
		eventsSet: () => { naja.uiHandler.bindUI(element) },
		dateClick: ({ dateStr }) => naja.makeRequest('GET', {link click!}, prefixObj({
			start: dateStr,
		})),

		datesSet: function({ view }) {
			$('[data-title]', control).text(view.title);
			$('[data-view]', control).removeClass('active');
			$('[data-view="'+ view.type +'"]', control).addClass('active');

			$('[data-view-name]', control).html($('[data-view].active', control).html());

			setSignalDates(view);
		},

		eventContent: function({ event, view }) {
			let titleHtml = event.extendedProps.titleHtml;

			if (!titleHtml || view.type == 'dayGridMonth') {
				return true;
			}

			return { html: titleHtml };
		},

		eventDrop: ({ event }) => naja.makeRequest('GET', {link drop!}, prefixObj({
			type: event.extendedProps.source,
			id: event.id,
			start: event.startStr,
			allDay: Number(event.allDay),
		})),
		eventResize: ({ event }) => naja.makeRequest('GET', {link resize!}, prefixObj({
			type: event.extendedProps.source,
			id: event.id,
			end: event.endStr,
			allDay: Number(event.allDay),
		})),

		eventDragStart:		() => element.toggleAttribute('data-no-refresh'),
		eventDragStop:		() => element.toggleAttribute('data-no-refresh'),
		eventResizeStart:	() => element.toggleAttribute('data-no-refresh'),
		eventResizeStop:	() => element.toggleAttribute('data-no-refresh'),

		eventWillUnmount: ({ el }) => $(el).popover('dispose'),
		eventDidMount: function({ el, event }) {
			let title = event.extendedProps.label;
			let content = event.extendedProps.content;
			let source = event.extendedProps.source;

			// Set the HTML element's id to match the event's id
			el.id = 'event-' + source + '-' + event.id;

			if (location.hash === '#'+el.id) {
				el.classList.add('focus', 'scale-slow');
			}

			$(el).on('mouseenter', () => $('.fc-group-'+event.groupId).addClass('hover'));
			$(el).on('mouseleave', () => $('.fc-group-'+event.groupId).removeClass('hover'));

			if (!title || !content) {
				return;
			}

			$(el).popover({
				title: title,
				content: content,
				placement: 'right',
				trigger: 'manual',
				html: true
			});

			$(el).on('mousedown mouseup mouseleave', () => $(el).popover('hide'));
			$(el).on('mouseenter', () => {
				let isNoRefresh = (element.dataset.noRefresh !== undefined);
				let isShowDetails = (element.dataset.details !== undefined);

				if (isShowDetails && !isNoRefresh) {
					$(el).popover('show');
				}
			});
		},

		windowResize: function({ view }) {
			let isLandscape = window.matchMedia('(orientation: landscape)').matches;
			let isResponsive = (element.dataset.responsive !== undefined);
			let windowWidth = window.innerWidth;
			let targetWidth = 800;

			if (!isResponsive) {
				return;
			}

			if (!isLandscape && windowWidth < targetWidth && calendarView == null) {
				calendarView = view.type;
				calendar.changeView('timeGridDay');
				return;
			}

			if (!calendarView || (!isLandscape && windowWidth < targetWidth && calendarView !== null)) {
				return;
			}

			calendar.changeView(calendarView);
			calendarView = null;
		}
	}));

	calendar.render();

	naja.addEventListener('complete', () => calendar.refetchEvents());
	window.dispatchEvent(new Event('resize'));


	$('[data-prev]', control).off('click').on('click',	() => { calendar.prev(); Cookies.set(prefix('date'), calendar.view.currentStart.toISOString(), { expires: .1 }); });
	$('[data-next]', control).off('click').on('click',	() => { calendar.next(); Cookies.set(prefix('date'), calendar.view.currentStart.toISOString(), { expires: .1 }); });
	$('[data-today]', control).off('click').on('click',	() => { calendar.today(); Cookies.remove(prefix('date')); });
	$('[data-view]', control).off('click').on('click',	({ target }) => {
		// Set cookie with new view before calling changeView so refetching has actual value
		Cookies.set(prefix('view'), target.dataset.view, { expires: 365 });

		calendar.changeView(target.dataset.view);
		control.dataset.view = null;
	});


	$('[data-set-show-details]', control).off('click').on('click', function() {
		let isShowDetails = element.toggleAttribute('data-details');
		$('.icon i', this).toggleClass('invisible');

		if (!isShowDetails) {
			$('.fc-event', control).popover('hide');
		}

		Cookies.set(prefix('showDetails'), isShowDetails ? 1 : 0, { expires: 365 });
		return false;
	});

	$('[data-set-editable]', control).off('click').on('click', function() {
		let isEditable = calendar.getOption('editable');
		calendar.setOption('editable', !isEditable);
		$('.icon i', this).toggleClass('invisible');

		Cookies.set(prefix('editable'), isEditable ? 0 : 1, { expires: 365 });
		return false;
	});

	$('[data-set-auto-refresh]', control).off('click').on('click', function() {
		let isAutoRefresh = element.toggleAttribute('data-refresh');
		element.removeAttribute('data-no-refresh');
		$('.icon i', this).toggleClass('invisible');

		Cookies.set(prefix('autoRefresh'), isAutoRefresh ? 1 : 0, { expires: 365 });
		return refreshCalendar() ?? false;
	});

	$('[data-set-responsive]', control).off('click').on('click', function() {
		let isResponsive = element.toggleAttribute('data-responsive');
		$('.icon i', this).toggleClass('invisible');

		Cookies.set(prefix('responsive'), isResponsive ? 1 : 0, { expires: 365 });
		return false;
	});


	setInterval(refreshCalendar, 5000);

	function refreshCalendar() {
		let isAutoRefresh = (element.dataset.refresh !== undefined);
		let isNoRefresh = (element.dataset.noRefresh !== undefined);

		if (!isAutoRefresh || isNoRefresh) {
			return;
		}

		// set min-height
		$('.fc-daygrid-body', control).css('min-height', $('.fc-daygrid-body').css('height'));

		calendar.refetchEvents();

		// remove min height
		$('.fc-daygrid-body', control).css('min-height', null);
	}

	function setSignalDates(view) {
		let start = view.activeStart.toISOString();
		let end = view.activeEnd.toISOString();

		$('[data-signal-date]', control).each((i, target) => {
			let url = new URL(target.href);
			let prefix = '';

			if (url.searchParams.has('do')) {
				prefix = url.searchParams.get('do');
				prefix = prefix.substr(0, prefix.lastIndexOf('-') +1);
			}

			url.searchParams.set(prefix+'start', start);
			url.searchParams.set(prefix+'end', end);

			target.href = url;
		});
	}

}, false);
</script>