<div class="card card-primary card-outline" id="{$controlName}">
<div n:snippet="calendar">

	<div class="card-header border-0 pb-0" n:if="$config->isHeaderCustom()">

		<div class="btn-toolbar d-flex" role="toolbar" n:snippet="toolbar">

			<div class="btn-group mr-2 mb-2" role="group">
				<a role="button" class="btn btn-primary" data-today>{_calendar.toolbar.today|noescape}</a>
			</div>

			<div class="btn-group mr-2 mb-2" role="group">
				<a role="button" class="btn btn-primary" data-prev>{_calendar.toolbar.prev|noescape}</a>
				<a role="button" class="btn btn-primary" data-next>{_calendar.toolbar.next|noescape}</a>
			</div>

			<div class="flex-fill align-self-center mb-2 order-0">
				<h1 class="text-capitalize card-title float-none ml-3" data-title></h1>
			</div>

			<div class="btn-group mb-2" role="group">
				<a role="button" class="btn btn-primary dropdown-toggle" data-view-name data-toggle="dropdown" aria-expanded="false"></a>
				<div class="dropdown-menu">
					<a class="dropdown-item" href="#" data-view="dayGridMonth">{_calendar.toolbar.view.month}</a>
					<a class="dropdown-item" href="#" data-view="timeGridWeek">{_calendar.toolbar.view.week}</a>
					<a class="dropdown-item" href="#" data-view="timeGridDay">{_calendar.toolbar.view.day}</a>
				</div>
			</div>

			<div n:snippet="actions">
				<div n:ifcontent n:inner-foreach="$actions as $action">
					{control $action}
				</div>
			</div>

			<div class="btn-group mb-2 ml-2" role="group">
				<a href="#" class="btn btn-secondary dropdown-toggle" data-toggle="dropdown" data-tooltip title="{_calendar.toolbar.settings}"><i class="fa fa-cog fa-fw"></i></a>
				<div class="dropdown-menu dropdown-menu-right stateful">
					<a href="#" class="dropdown-item py-2" data-set-show-details>
						<div class="icon"><i n:class="fa-solid, fa-check, fa-fw, !$config->isShowDetails() ? invisible"></i></div>
						<div class="content">
							<span class="h6 mb-0 d-block">{_calendar.settings.showDetails}</span>
							<small class="text-muted">{_calendar.settings.showDetails-desc}</small>
						</div>
					</a>
					<a href="#" class="dropdown-item py-2" data-set-auto-refresh>
						<div class="icon"><i n:class="fa-solid, fa-check, fa-fw, !$config->isAutoRefresh() ? invisible"></i></div>
						<div class="content">
							<span class="h6 mb-0 d-block">{_calendar.settings.autoRefresh}</span>
							<small class="text-muted">{_calendar.settings.autoRefresh-desc}</small>
						</div>
					</a>
					<a href="#" class="dropdown-item py-2" data-set-editable>
						<div class="icon"><i n:class="fa-solid, fa-check, fa-fw, !$config->isEditable() ? invisible"></i></div>
						<div class="content">
							<span class="h6 mb-0 d-block">{_calendar.settings.editable}</span>
							<small class="text-muted">{_calendar.settings.editable-desc}</small>
						</div>
					</a>
					<div class="dropdown-divider"></div>
					<a href="#" class="dropdown-item py-2" data-set-responsive>
						<div class="icon"><i n:class="fa-solid, fa-check, fa-fw, !$config->isResponsive() ? invisible"></i></div>
						<div class="content">
							<span class="h6 mb-0 d-block">{_calendar.settings.responsive}</span>
							<small class="text-muted">{_calendar.settings.responsive-desc}</small>
						</div>
					</a>
				</div>
			</div>

		</div>

	</div>

	<div class="card-body p-0" id="{$controlName}-timeGrid" n:attr="...$options"></div>

	<div class="card-footer pb-1" n:inner-foreach="$sources as $source" n:ifcontent>
		<div n:if="$types = $source->getLegend()" n:inner-foreach="$types as $type" n:ifcontent>
			{continueIf !$type instanceof $legend}
			<small class="text-muted pr-2" n:ifchanged>{_calendar.footer.legend}:</small>
			{$type->createBadge()}
		</div>
	</div>

</div>
</div>

<script type="text/javascript" defer="defer">
document.addEventListener('DOMContentLoaded', function() {

	const prefix = (key) => {$controlName}+"-"+key;
	const prefixObj = (obj) => Object.fromEntries(
		Object.entries(obj).map(([k, v]) => [prefix(k), v])
	);

	let config = {$config}
	let element = document.getElementById(prefix('timeGrid'));
	let control = document.getElementById({$controlName});

	let calendarView = null;
	let calendar = new FullCalendar.Calendar(element, Object.assign({}, config, {
		endParam: prefix('end'),
		startParam: prefix('start'),
		timeZoneParam: prefix('timeZone'),
		eventSources: [{link fetch!}],

		// Events
		eventsSet: () => { naja.uiHandler.bindUI(element) },
		dateClick: ({ dateStr }) => naja.makeRequest('GET', {link click!}, prefixObj({
			start: dateStr,
		})),

		datesSet: function({ view }) {
			$('[data-title]', control).text(view.title);
			$('[data-view]', control).removeClass('active');
			$('[data-view="'+ view.type +'"]', control).addClass('active');

			$('[data-view-name]', control).html($('[data-view].active', control).html());
		},

		eventContent: function({ event, view }) {
			let titleHtml = event.extendedProps.titleHtml;

			if (!titleHtml || view.type == 'dayGridMonth') {
				return true;
			}

			return { html: titleHtml };
		},

		eventDrop: ({ event }) => naja.makeRequest('GET', {link drop!}, prefixObj({
			type: event.extendedProps.source,
			id: event.id,
			start: event.startStr,
			allDay: Number(event.allDay),
		})),
		eventResize: ({ event }) => naja.makeRequest('GET', {link resize!}, prefixObj({
			type: event.extendedProps.source,
			id: event.id,
			end: event.endStr,
			allDay: Number(event.allDay),
		})),

		eventDragStart:		() => element.toggleAttribute('data-no-refresh'),
		eventDragStop:		() => element.toggleAttribute('data-no-refresh'),
		eventResizeStart:	() => element.toggleAttribute('data-no-refresh'),
		eventResizeStop:	() => element.toggleAttribute('data-no-refresh'),

		eventWillUnmount: ({ el }) => $(el).popover('dispose'),
		eventDidMount: function({ el, event }) {
			let title = event.extendedProps.label;
			let content = event.extendedProps.content;

			$(el).on('mouseenter', () => $('.fc-group-'+event.groupId).addClass('hover'));
			$(el).on('mouseleave', () => $('.fc-group-'+event.groupId).removeClass('hover'));

			if (!title || !content) {
				return;
			}

			$(el).popover({
				title: title,
				content: content,
				placement: 'right',
				trigger: 'manual',
				html: true
			});

			$(el).on('mousedown mouseup mouseleave', () => $(el).popover('hide'));
			$(el).on('mouseenter', () => {
				let isNoRefresh = (element.dataset.noRefresh !== undefined);
				let isShowDetails = (element.dataset.details !== undefined);

				if (isShowDetails && !isNoRefresh) {
					$(el).popover('show');
				}
			});
		},

		windowResize: function({ view }) {
			let isLandscape = window.matchMedia('(orientation: landscape)').matches;
			let isResponsive = (element.dataset.responsive !== undefined);
			let windowWidth = window.innerWidth;
			let targetWidth = 800;

			if (!isResponsive) {
				return;
			}

			if (!isLandscape && windowWidth < targetWidth && calendarView == null) {
				calendarView = view.type;
				calendar.changeView('timeGridDay');
				return;
			}

			if (!calendarView || (!isLandscape && windowWidth < targetWidth && calendarView !== null)) {
				return;
			}

			calendar.changeView(calendarView);
			calendarView = null;
		}
	}));

	calendar.render();

	naja.addEventListener('complete', () => calendar.refetchEvents());
	window.dispatchEvent(new Event('resize'));


	$('[data-prev]', control).off('click').on('click',	() => { calendar.prev(); Cookies.set(prefix('date'), calendar.view.currentStart.toISOString(), { expires: .1 }); });
	$('[data-next]', control).off('click').on('click',	() => { calendar.next(); Cookies.set(prefix('date'), calendar.view.currentStart.toISOString(), { expires: .1 }); });
	$('[data-today]', control).off('click').on('click',	() => { calendar.today(); Cookies.remove(prefix('date')); });
	$('[data-view]', control).off('click').on('click',	({ target }) => {
		// Set cookie with new view before calling changeView so refetching has actual value
		Cookies.set(prefix('view'), target.dataset.view, { expires: 365 });

		calendar.changeView(target.dataset.view);
		control.dataset.view = null;
	});


	$('[data-set-show-details]', control).off('click').on('click', function() {
		let isShowDetails = element.toggleAttribute('data-details');
		$('.icon i', this).toggleClass('invisible');

		if (!isShowDetails) {
			$('.fc-event', control).popover('hide');
		}

		Cookies.set(prefix('showDetails'), isShowDetails ? 1 : 0, { expires: 365 });
		return false;
	});

	$('[data-set-editable]', control).off('click').on('click', function() {
		let isEditable = calendar.getOption('editable');
		calendar.setOption('editable', !isEditable);
		$('.icon i', this).toggleClass('invisible');

		Cookies.set(prefix('editable'), isEditable ? 0 : 1, { expires: 365 });
		return false;
	});

	$('[data-set-auto-refresh]', control).off('click').on('click', function() {
		let isAutoRefresh = element.toggleAttribute('data-refresh');
		element.removeAttribute('data-no-refresh');
		$('.icon i', this).toggleClass('invisible');

		Cookies.set(prefix('autoRefresh'), isAutoRefresh ? 1 : 0, { expires: 365 });
		return refreshCalendar() ?? false;
	});

	$('[data-set-responsive]', control).off('click').on('click', function() {
		let isResponsive = element.toggleAttribute('data-responsive');
		$('.icon i', this).toggleClass('invisible');

		Cookies.set(prefix('responsive'), isResponsive ? 1 : 0, { expires: 365 });
		return false;
	});


	setInterval(refreshCalendar, 5000);

	function refreshCalendar() {
		let isAutoRefresh = (element.dataset.refresh !== undefined);
		let isNoRefresh = (element.dataset.noRefresh !== undefined);

		if (!isAutoRefresh || isNoRefresh) {
			return;
		}

		// set min-height
		$('.fc-daygrid-body', control).css('min-height', $('.fc-daygrid-body').css('height'));

		calendar.refetchEvents();

		// remove min height
		$('.fc-daygrid-body', control).css('min-height', null);
	}

}, false);
</script>
