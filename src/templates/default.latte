<div class="card card-primary card-outline" id="{$control->getName()}">
<div n:snippet="calendar">

	<div class="card-header border-0 pb-0" n:if="$config->isHeaderCustom()">

		<div class="btn-toolbar d-flex" role="toolbar" n:snippet="toolbar">

			<div class="btn-group mr-2 mb-2" role="group">
				<a role="button" class="btn btn-primary" data-today>{_web.calendar.today|noescape}</a>
			</div>

			<div class="btn-group mr-2 mb-2" role="group">
				<a role="button" class="btn btn-primary" data-prev>{_web.calendar.prev|noescape}</a>
				<a role="button" class="btn btn-primary" data-next>{_web.calendar.next|noescape}</a>
			</div>

			<div class="flex-fill align-self-center mb-2 order-0">
				<h1 class="text-capitalize card-title float-none ml-3" data-title></h1>
			</div>

			<div class="btn-group mb-2" role="group">
				<a role="button" class="btn btn-primary dropdown-toggle" data-view-name data-toggle="dropdown" aria-expanded="false"></a>
				<div class="dropdown-menu">
					<a class="dropdown-item" href="#" data-view="dayGridMonth">{_web.calendar.view.dayGridMonth}</a>
					<a class="dropdown-item" href="#" data-view="timeGridWeek">{_web.calendar.view.timeGridWeek}</a>
					<a class="dropdown-item" href="#" data-view="timeGridDay">{_web.calendar.view.timeGridDay}</a>
				</div>
			</div>

			<div n:snippet="actions">
				<div n:ifcontent n:inner-foreach="$actions as $action">
					{control $action}
				</div>
			</div>

			{* TODO Add settings dropdown *}

		</div>

	</div>

	<div class="card-body p-0" id="{$control->getName()}-timeGrid"></div>

	<div class="card-footer pb-1" n:inner-foreach="$sources as $source" n:ifcontent>
		<div n:if="$types = $source->getLegend()" n:inner-foreach="$types as $type" n:ifcontent>
			{continueIf !$type instanceof $legend}
			<small class="text-muted pr-2" n:ifchanged>{_web.calendar.legend}:</small>
			{$type->createBadge()}
		</div>
	</div>

</div>
</div>

<script type="text/javascript" defer="defer">
document.addEventListener('DOMContentLoaded', function() {

	const prefix = (key) => {$control->getName()}+"-"+key;
	const prefixObj = (obj) => Object.fromEntries(
		Object.entries(obj).map(([k, v]) => [prefix(k), v])
	);

	let calendarView = null;
	const config = {$config};

	let control = document.getElementById({$control->getName()});
	let element = document.getElementById(prefix('timeGrid'));
	let calendar = new FullCalendar.Calendar(element, Object.assign({}, config, {
		endParam: prefix('end'),
		startParam: prefix('start'),
		timeZoneParam: prefix('timeZone'),
		eventSources: [{link fetch!}],

		// Events
		eventsSet: () => { naja.uiHandler.bindUI(element) },

		datesSet: function({ view }) {
			let url = new URL(document.location);

			if (url.searchParams.has('date')) {
				url.searchParams.delete('date');
				window.history.replaceState(null, '', url);
			}

			$('[data-title]', control).text(view.title);
			$('[data-view]', control).removeClass('active');
			$('[data-view="'+ view.type +'"]', control).addClass('active');

			$('[data-view-name]', control).html($('[data-view].active', control).html());
		},
	}));

	if ({$control->isClickHandled()}) {
		calendar.setOption('dateClick', ({ dateStr }) => naja.makeRequest('GET', {link click!}, prefixObj({
			start: dateStr,
		})));
	}

	if ({$config->isEditable()}) {
		calendar.setOption('eventDrop', ({ event }) => naja.makeRequest('GET', {link drop!}, prefixObj({
			type: event.extendedProps.type,
			id: event.id,
			start: event.startStr,
			allDay: event.allDay,
		})));

		calendar.setOption('eventResize',  ({ event }) => naja.makeRequest('GET', {link resize!}, prefixObj({
			type: event.extendedProps.type,
			id: event.id,
			end: event.endStr,
			allDay: event.allDay,
		})));
	}

	calendar.render();

	naja.addEventListener('complete', () => calendar.refetchEvents());


	if ({$config->isHeaderCustom()}) {
		$('[data-prev]', control).off('click').on('click', () => { calendar.prev(); /*Cookies.set('calendar.date', calendar.view.currentStart.toISOString(), { expires: .1 });*/ });
		$('[data-next]', control).off('click').on('click', () => { calendar.next(); /*Cookies.set('calendar.date', calendar.view.currentStart.toISOString(), { expires: .1 });*/ });
		$('[data-today]', control).off('click').on('click', () => { calendar.today(); /*Cookies.remove('calendar.date');*/ });
		$('[data-view]', control).off('click').on('click', ({ target }) => {
			// Set cookie with new view before calling changeView so refetching has actual value
			//Cookies.set('calendar.view', target.dataset.view, { expires: 365 });

			calendar.changeView(target.dataset.view);
			calendarView = null;
		});
	}

}, false);
</script>
